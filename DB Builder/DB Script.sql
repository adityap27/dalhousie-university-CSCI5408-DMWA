-------------------------------------------------------
-- CSCI 5408 - Data Management, Warehousing & Analytics
-- Authors: Aditya Pattani (B00966361)
--			Aditya Maheshbhai Purohit (B00952865)
--
-- This code contains all the entities and relationships
-- described in the DB Builder Report
-------------------------------------------------------

-- Dropping and Creating the database
DROP DATABASE IF EXISTS CSCI5408_GROUP28;

CREATE DATABASE IF NOT EXISTS CSCI5408_GROUP28;

USE CSCI5408_GROUP28;

-- Dropping and Creating the tables
DROP TABLE IF EXISTS PROPERTY;

CREATE TABLE PROPERTY (
		 PROPERTY_ID	INT	PRIMARY KEY	NOT NULL
		,NAME			VARCHAR(100)	NOT NULL
		,DESCRIPTION	VARCHAR(255)	NOT NULL
		,WEBSITE		VARCHAR(255)	NOT NULL
		,CONTACT_NUMBER	VARCHAR(14)		NOT NULL
		,ADDRESS		VARCHAR(255)	NOT NULL
);

DROP TABLE IF EXISTS ROOM_TYPE;

CREATE TABLE ROOM_TYPE (
		 TYPE_NAME		VARCHAR(50)	PRIMARY KEY NOT NULL	DEFAULT "Single"	UNIQUE
		,DESCRIPTION	VARCHAR(255)			NOT NULL
);

DROP TABLE IF EXISTS MEMBERSHIP;

CREATE TABLE MEMBERSHIP (
		 NUMBER			INT	PRIMARY KEY	NOT NULL
		,TYPE			VARCHAR(50)		NOT NULL	DEFAULT "Solo"
		,START_DATE		DATE			NOT NULL
		,END_DATE		DATE
);

DROP TABLE IF EXISTS ROOM;

CREATE TABLE ROOM (
		 ROOM_NO			INT	PRIMARY KEY	NOT NULL
		,BEDS				INT				NOT NULL
		,BATHROOMS			INT				NOT NULL
		,AVAILABILITY		SMALLINT		NOT NULL
		,PRICE_PER_NIGHT	INT				NOT NULL
		,PROPERTY_ID		INT				NOT NULL
		,ROOM_TYPE			VARCHAR(50)		NOT NULL
		,FOREIGN KEY (PROPERTY_ID)
			REFERENCES PROPERTY(PROPERTY_ID)
		,FOREIGN KEY (ROOM_TYPE)
			REFERENCES ROOM_TYPE(TYPE_NAME)
);

DROP TABLE IF EXISTS AMENITIES;

CREATE TABLE AMENITIES (
		 NAME			VARCHAR(100)	PRIMARY KEY NOT NULL
		,DESCRIPTION	VARCHAR(255)				NOT NULL
		,PROPERTY_ID	INT							NOT NULL
		,FOREIGN KEY (PROPERTY_ID)
			REFERENCES PROPERTY(PROPERTY_ID)
);

DROP TABLE IF EXISTS GUEST;

CREATE TABLE GUEST (
		 GUEST_ID			INT	PRIMARY KEY	NOT NULL
		,FIRST_NAME			VARCHAR(255)	NOT NULL
		,LAST_NAME			VARCHAR(255)	NOT NULL
		,EMAIL				VARCHAR(100)	NOT NULL	UNIQUE
		,PHONE_NUMBER		VARCHAR(14)		NOT NULL	UNIQUE
		,GENDER				SMALLINT		NOT NULL
		,MEMBERSHIP_NUMBER	INT
		,FOREIGN KEY (MEMBERSHIP_NUMBER)
			REFERENCES MEMBERSHIP(NUMBER)
);

DROP TABLE IF EXISTS RESERVATION;

CREATE TABLE RESERVATION (
		 BOOKING_ID		INT	PRIMARY KEY	NOT NULL
		,START_DATE		DATE			NOT NULL
		,END_DATE		DATE
		,GUEST_ID		INT				NOT NULL
		,ROOM_NO		INT				NOT NULL
		,FOREIGN KEY (GUEST_ID)
			REFERENCES GUEST(GUEST_ID)
		,FOREIGN KEY (ROOM_NO)
			REFERENCES ROOM(ROOM_NO)
);

DROP TABLE IF EXISTS DEAL;

CREATE TABLE DEAL (
		 DEAL_CODE		VARCHAR(50)	PRIMARY KEY	NOT NULL
		,EXPIRY_DATE	DATE
		,DESCRIPTION	VARCHAR(255)			NOT NULL
		,PROPERTY_ID	INT						NOT NULL
		,FOREIGN KEY (PROPERTY_ID)
			REFERENCES PROPERTY(PROPERTY_ID)
);

DROP TABLE IF EXISTS MEETING_SPACE;

CREATE TABLE MEETING_SPACE (
		 HALL_NO			INT	PRIMARY KEY	NOT NULL
		,NAME				VARCHAR(20)
		,DESCRIPTION		VARCHAR(255)	NOT NULL
		,MAX_ACCOMODATION	INT				NOT NULL
		,RENT				INT				NOT NULL
		,PROPERTY_ID		INT				NOT NULL
		,FOREIGN KEY (PROPERTY_ID)
			REFERENCES PROPERTY(PROPERTY_ID)
);

DROP TABLE IF EXISTS PAYMENT_DETAIL;

CREATE TABLE PAYMENT_DETAIL (
		 PAYMENT_ID		INT	PRIMARY KEY	NOT NULL
		,DATE			DATE			NOT NULL
		,METHOD			VARCHAR(10)		NOT NULL	-- Can make this an INT field if we have a Payment_Method table
		,AMOUNT			INT				NOT NULL
);

DROP TABLE IF EXISTS INVOICE;

CREATE TABLE INVOICE (
		 INVOICE_ID		INT	PRIMARY KEY	NOT NULL
		,DATE_ISSUED	DATE			NOT NULL
		,TOTAL_AMOUNT	INT				NOT NULL
		,RESERVATION_ID	INT				NOT NULL
		,PAYMENT_DETAIL	INT				NOT NULL
		,FOREIGN KEY (RESERVATION_ID)
			REFERENCES RESERVATION(BOOKING_ID)
		,FOREIGN KEY (PAYMENT_DETAIL)
			REFERENCES PAYMENT_DETAIL(PAYMENT_ID)
);

DROP TABLE IF EXISTS EMPLOYEE;

CREATE TABLE EMPLOYEE (
		 EMAIL				VARCHAR(255)	PRIMARY KEY	NOT NULL
		,FIRST_NAME			VARCHAR(255)				NOT NULL
		,LAST_NAME			VARCHAR(255)				NOT NULL
		,PHONE_NO			VARCHAR(14)					NOT NULL	UNIQUE
		,GENDER				SMALLINT					NOT NULL
		,SALARY				INT							NOT NULL
		,DEPARTMENT			VARCHAR(50)					NOT NULL
		,DATE_OF_JOINING	DATE						NOT NULL
		,DESIGNATION		VARCHAR(100)				NOT NULL
		,WORKS_AT			INT							NOT NULL
		,FOREIGN KEY (WORKS_AT)
			REFERENCES PROPERTY(PROPERTY_ID)
);

DROP TABLE IF EXISTS EMPLOYEE_SALARY_HIST;

CREATE TABLE EMPLOYEE_SALARY_HIST (
		 EMAIL				VARCHAR(255)	PRIMARY KEY	NOT NULL
		,SALARY_START_DATE	DATE						NOT NULL
		,SALARY				INT							NOT NULL
		,FOREIGN KEY (EMAIL)
			REFERENCES EMPLOYEE(EMAIL)
);

DROP TABLE IF EXISTS REVIEW;

CREATE TABLE REVIEW (
		 REVIEW_ID				INT	PRIMARY KEY	NOT NULL
		,RATING					SMALLINT		NOT NULL
		,CONTENTS				VARCHAR(255)	NOT NULL
		,WRITTEN_BY				INT				NOT NULL
		,WRITTEN_FOR_BOOKING	INT				NOT NULL
		,FOREIGN KEY (WRITTEN_BY)
			REFERENCES GUEST(GUEST_ID)
		,FOREIGN KEY (WRITTEN_FOR_BOOKING)
			REFERENCES RESERVATION(BOOKING_ID)
);

DROP TABLE IF EXISTS PARKING_LOT;

CREATE TABLE PARKING_LOT (
		 LOCATION		VARCHAR(255)	PRIMARY KEY	NOT NULL
		,CAPACITY		INT							NOT NULL
		,FOR_PROPERTY	INT							NOT NULL
		,FOREIGN KEY (FOR_PROPERTY)
			REFERENCES PROPERTY(PROPERTY_ID)
);

DROP TABLE IF EXISTS PARKING_SPOT;

CREATE TABLE PARKING_SPOT (
		 LOCATION		VARCHAR(255)	NOT NULL
		,NUMBER			INT				NOT NULL
		,PRICE			INT				NOT NULL
		,PARKING_LOT	VARCHAR(255)	NOT NULL
		,PRIMARY KEY (LOCATION, PARKING_LOT)
		,FOREIGN KEY (PARKING_LOT)
			REFERENCES PARKING_LOT(LOCATION)
);

DROP TABLE IF EXISTS EVENT;

CREATE TABLE EVENT (
		 NAME			VARCHAR(100)	NOT NULL	UNIQUE
		,DATE			DATE			NOT NULL
		,MAX_SEATS		INT				NOT NULL
		,DESCRIPTION	VARCHAR(255)	NOT NULL
		,PROPERTY_ID	INT				NOT NULL
		,PRIMARY KEY (NAME, DATE, PROPERTY_ID)
		,FOREIGN KEY (PROPERTY_ID)
			REFERENCES PROPERTY(PROPERTY_ID)
); -- To add primary Key

DROP TABLE IF EXISTS ITEM_STOCK;

CREATE TABLE ITEM_STOCK (
		 ITEM_ID		INT	PRIMARY KEY	NOT NULL
		,NAME			VARCHAR(255)	NOT NULL
		,QUANTITY		INT							DEFAULT 0
		,DEALER			VARCHAR(100)	NOT NULL
		,PROPERTY_ID	INT				NOT NULL
		,FOREIGN KEY (PROPERTY_ID)
			REFERENCES PROPERTY(PROPERTY_ID)
);

DROP TABLE IF EXISTS RESTAURANT;

CREATE TABLE RESTAURANT (
		 NAME			VARCHAR(255)	PRIMARY KEY	NOT NULL
		,CAPACITY		INT							NOT NULL
		,DESCRIPTION	VARCHAR(255)				NOT NULL
		,PROPERTY_ID	INT							NOT NULL
		,FOREIGN KEY (PROPERTY_ID)
			REFERENCES PROPERTY(PROPERTY_ID)
);

DROP TABLE IF EXISTS ELEVATOR;

CREATE TABLE ELEVATOR (
		 ELEVATOR_ID	INT	PRIMARY KEY	NOT NULL
		,CAPACITY		INT				NOT NULL	DEFAULT 0
		,STATUS			SMALLINT		NOT NULL	DEFAULT 1	-- 1 means working and 0 means inactive
		,PROPERTY_ID	INT				NOT NULL
		,FOREIGN KEY (PROPERTY_ID)
			REFERENCES PROPERTY(PROPERTY_ID)
);

DROP TABLE IF EXISTS LOCKER;

CREATE TABLE LOCKER (
		 LOCKER_NO		INT	PRIMARY KEY	NOT NULL
		,SIZE			VARCHAR(10)		NOT NULL
		,PROPERTY_ID	INT				NOT NULL
		,FOREIGN KEY (PROPERTY_ID)
			REFERENCES PROPERTY(PROPERTY_ID)
);

DROP TABLE IF EXISTS SERVICE_REQUEST;

CREATE TABLE SERVICE_REQUEST (
		 REQUEST_ID		INT	PRIMARY KEY	NOT NULL
		,TYPE			VARCHAR(100)	NOT NULL
		,DESCRIPTION	VARCHAR(255)	NOT NULL
		,STATUS			SMALLINT		NOT NULL
		,DATE_CREATED	DATE			NOT NULL
		,GUEST_ID		INT				NOT NULL
		,ROOM_NO		INT				NOT NULL
		,FOREIGN KEY (GUEST_ID)
			REFERENCES GUEST(GUEST_ID)
		,FOREIGN KEY (ROOM_NO)
			REFERENCES ROOM(ROOM_NO)
);
